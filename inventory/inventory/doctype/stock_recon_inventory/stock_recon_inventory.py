# Embedded file name: /home/myme/frappe-bench/apps/inventory/inventory/inventory/doctype/stock_recon_inventory/stock_recon_inventory.pyfrom __future__ import unicode_literalsimport frappefrom frappe.model.document import Documentfrom frappe import msgprintimport frappe.utilsfrom frappe.utils import cstr, flt, getdate, comma_and, cintfrom frappe import _from frappe.model.mapper import get_mapped_docform_grid_templates = {u'roll_in': u'templates/includes/stock_recon.html', u'roll_out': u'templates/includes/stock_recon.html'}class StockReconInventory(Document):	def add_item_roll(self):		count = 0		max_qty = 0		if self.item_code_variant and self.colour and self.yard_atau_meter_per_roll and self.total_roll:			warehouse = frappe.get_value("Item", self.item_code_variant, "default_warehouse")			uom = frappe.get_value("Item", self.item_code_variant, "stock_uom")			result = frappe.db.sql("""				SELECT b.`valuation_rate` FROM `tabBin`b 				WHERE b.`warehouse`="{0}" AND b.`item_code`="{1}"				""".format(warehouse, self.item_code_variant))			rate = 0			if len(result) > 0:				res = result[0]				if res[0]:					rate = res[0]			full_group = ""			if self.group:				full_group = self.group				result = frappe.db.sql(""" SELECT i.`name` FROM `tabGroup Item`i WHERE i.`group_code`="{0}" """.format(full_group))				if len(result) == 0:					frappe.throw("Group tidak ditemukan")			if self.type_roll == "Out":				if self.group:					total_roll = frappe.db.sql("""					SELECT					di.`total_roll`					FROM `tabData Inventory` di					WHERE di.`item_code_variant` = "{}"					AND di.`colour` = "{}"					AND di.`yard_atau_meter_per_roll` = "{}"					AND di.`group` = "{}"					AND di.`total_roll` >= {}					""".format(self.item_code_variant, self.colour, self.yard_atau_meter_per_roll, full_group, self.total_roll))				else:					total_roll = frappe.db.sql("""						SELECT						di.`total_roll`						FROM `tabData Inventory` di						WHERE di.`item_code_variant` = "{}"						AND di.`colour` = "{}"						AND di.`yard_atau_meter_per_roll` = "{}"						AND di.`group` IS NULL						""".format(self.item_code_variant, self.colour, self.yard_atau_meter_per_roll))				if total_roll:					max_qty = total_roll[0]					max_qty = max_qty[0]					if self.total_roll > max_qty :						frappe.throw("Item Tidak Ditemukan, ada kemungkinan salah Yard / Colour atau jumlah Roll nya kebanyakan")				else:					frappe.throw("Item Tidak Ditemukan, ada kemungkinan salah Yard / Colour atau jumlah Roll nya kebanyakan")			if self.type_roll == "In":				if self.roll_in:					for i in self.roll_in:						if i.item_code_roll == self.item_code_variant and i.colour == self.colour and i.yard_atau_meter_per_roll == self.yard_atau_meter_per_roll and i.group == full_group :							count = 1					if count == 1:						for i in self.roll_in:							if i.item_code_roll == self.item_code_variant and i.colour == self.colour and i.yard_atau_meter_per_roll == self.yard_atau_meter_per_roll and i.group == full_group:								new_total_roll = i.total_roll								i.total_roll = new_total_roll + self.total_roll								if i.total_roll > max_qty :									frappe.throw("Item Tidak Ditemukan, ada kemungkinan salah Yard / Colour atau jumlah Roll nya kebanyakan")					else:						pp_so = self.append("roll_in", {})						pp_so.item_code_roll = self.item_code_variant						pp_so.colour = self.colour						pp_so.yard_atau_meter_per_roll = self.yard_atau_meter_per_roll						pp_so.group = full_group						pp_so.total_roll = self.total_roll						pp_so.rate = rate						pp_so.warehouse = warehouse						pp_so.roll_uom = uom				else:					pp_so = self.append("roll_in", {})					pp_so.item_code_roll = self.item_code_variant					pp_so.colour = self.colour					pp_so.yard_atau_meter_per_roll = self.yard_atau_meter_per_roll					pp_so.group = full_group					pp_so.total_roll = self.total_roll					pp_so.rate = rate					pp_so.warehouse = warehouse					pp_so.roll_uom = uom			elif self.type_roll == "Out":				if self.roll_out:					for i in self.roll_out:						if i.item_code_roll == self.item_code_variant and i.colour == self.colour and i.yard_atau_meter_per_roll == self.yard_atau_meter_per_roll and i.group == full_group:							count = 1					if count == 1:						for i in self.roll_out:							if i.item_code_roll == self.item_code_variant and i.colour == self.colour and i.yard_atau_meter_per_roll == self.yard_atau_meter_per_roll and i.group == full_group:								new_total_roll = i.total_roll								i.total_roll = new_total_roll + self.total_roll								if i.total_roll > max_qty :									frappe.throw("Item Tidak Ditemukan, ada kemungkinan salah Yard / Colour atau jumlah Roll nya kebanyakan")					else:						pp_so = self.append("roll_out", {})						pp_so.item_code_roll = self.item_code_variant						pp_so.colour = self.colour						pp_so.yard_atau_meter_per_roll = self.yard_atau_meter_per_roll						pp_so.group = full_group						pp_so.total_roll = self.total_roll						pp_so.rate = rate						pp_so.warehouse = warehouse						pp_so.roll_uom = uom				else:					pp_so = self.append("roll_out", {})					pp_so.item_code_roll = self.item_code_variant					pp_so.colour = self.colour					pp_so.yard_atau_meter_per_roll = self.yard_atau_meter_per_roll					pp_so.group = full_group					pp_so.total_roll = self.total_roll					pp_so.rate = rate					pp_so.warehouse = warehouse					pp_so.roll_uom = uom			self.colour = ""			self.yard_atau_meter_per_roll = 0			self.total_roll = 1			self.group = ""		else:			frappe.throw("Item Code / Colour / Yard Meter per Roll / Total Roll belum diisi")	def add_item_pcs(self):		max_qty = 0		if self.item_code_pcs and self.qty_pcs:			item = frappe.get_doc("Item", self.item_code_pcs)			result = frappe.db.sql("""				SELECT b.`valuation_rate` FROM `tabBin`b WHERE b.`warehouse`="{0}" AND b.`item_code`="{1}"				""".format(item.default_warehouse, self.item_code_pcs))			rate = 0			if len(result) > 0:				res = result[0]				if res[0]:					rate = res[0]			count = 0			if self.type_pcs == "Out":				total_pcs_from = frappe.db.sql("""					SELECT					b.`actual_qty`					FROM `tabBin` b					WHERE b.`item_code` = "{}"					""".format(self.item_code_pcs))				if total_pcs_from:					max_qty = total_pcs_from[0]					max_qty = max_qty[0]					if self.qty_pcs > max_qty :						frappe.throw("Item Tidak Ditemukan, ada kemungkinan jumlah Qty nya kebanyakan")				else:					frappe.throw("Item Tidak Ditemukan, ada kemungkinan jumlah Qty nya kebanyakan")			if self.type_pcs == "In":				if self.pcs_in:					for i in self.pcs_in:						if i.item_code_pcs == self.item_code_pcs:							count = 1					if count == 1:						for i in self.pcs_in:							if i.item_code_pcs == self.item_code_pcs:								new_total_roll = i.total_pcs								i.total_pcs = new_total_roll + self.qty_pcs					else:						pp_so = self.append("pcs_in", {})						pp_so.item_code_pcs = self.item_code_pcs						pp_so.total_pcs = self.qty_pcs						pp_so.rate = rate						pp_so.uom_pcs = item.stock_uom						pp_so.warehouse = item.default_warehouse				else:					pp_so = self.append("pcs_in", {})					pp_so.item_code_pcs = self.item_code_pcs					pp_so.total_pcs = self.qty_pcs					pp_so.rate = rate					pp_so.uom_pcs = item.stock_uom					pp_so.warehouse = item.default_warehouse			elif self.type_pcs == "Out":				if self.pcs_out:					for i in self.pcs_out:						if i.item_code_pcs == self.item_code_pcs:							count = 1					if count == 1:						for i in self.pcs_out:							if i.item_code_pcs == self.item_code_pcs:								new_total_roll = i.total_pcs								i.total_pcs = new_total_roll + self.qty_pcs								if i.total_pcs > max_qty :									frappe.throw("Item Tidak Ditemukan, ada kemungkinan jumlah Qty nya kebanyakan")					else:						pp_so = self.append("pcs_out", {})						pp_so.item_code_pcs = self.item_code_pcs						pp_so.total_pcs = self.qty_pcs						pp_so.rate = rate						pp_so.uom_pcs = item.stock_uom						pp_so.warehouse = item.default_warehouse				else:					pp_so = self.append("pcs_out", {})					pp_so.item_code_pcs = self.item_code_pcs					pp_so.total_pcs = self.qty_pcs					pp_so.rate = rate					pp_so.uom_pcs = item.stock_uom					pp_so.warehouse = item.default_warehouse			self.qty_pcs = 1		else:			frappe.throw("Item Code / Total Pcs belum diisi")	def on_submit(self):		self.add_master_inventory_on_submit()		self.remove_master_inventory_on_submit()		self.create_stock_recon_erpnext_on_submit()	def on_cancel(self):		self.add_master_inventory_on_cancel()		self.remove_master_inventory_on_cancel()		self.cancel_stock_recon_erpnext_on_cancel()	def create_stock_recon_erpnext_on_submit(self):		pr_doc = frappe.new_doc("Stock Reconciliation")		pr_doc.update({			"posting_date": self.posting_date,			"posting_time": self.posting_time,			"stock_recon_inventory": self.name			})		#array_item = []		#count = 0		#if self.roll_in:		#	for i in self.roll_in:		#		if i.item_code_roll in array_item:		#			count = 0		#		else:		#			array_item.append(i.item_code_roll)				#if self.roll_out:		#	for i in self.roll_out:		#		if i.item_code_roll in array_item:		#			count = 0		#		else:		#			array_item.append(i.item_code_roll)		#for i in array_item:			#result = frappe.db.sql("""			#	SELECT			#	di.`item_code_variant`,			#	SUM(di.`total_roll` * di.`yard_atau_meter_per_roll`)			#	FROM `tabData Inventory` di			#	WHERE di.`item_code_variant` = "{}"			#	GROUP BY di.`item_code_variant`  			#	""".format(i), as_list=1)			#result = result[0]			#get_val_rate = frappe.db.sql("""			#	SELECT			#	b.`item_code`,			#	b.`valuation_rate`,			#	b.`actual_qty`			#	FROM `tabBin` b			#	WHERE b.`item_code` = "{}"			#	""".format(i), as_list=1)			#warehouse = frappe.get_doc("Item", result[0]).default_warehouse			#frappe.throw(result[1])			#pr_doc.append("items", {			#	"item_code": result[0],			#	"qty": result[1],			#	"warehouse": warehouse,			#	"valuation_rate": get_val_rate[0][1]			#	})				qty_roll = {}		if self.roll_in :			for item in self.roll_in :				key = (item.item_code_roll,item.warehouse)				if key not in qty_roll :					qty_roll[key] = item.total_roll * item.yard_atau_meter_per_roll				else :					qty_roll[key] = qty_roll[key] + (item.total_roll * item.total_yard_atau_meter_per_roll)		if self.roll_out :			for item in self.roll_out :				key = (item.item_code_roll,item.warehouse)				if key not in qty_roll :					qty_roll[key] = -item.total_roll * item.yard_atau_meter_per_roll				else :					qty_roll[key] = qty_roll[key] - (item.total_roll * item.total_yard_atau_meter_per_roll)							in_clause = ""		for key in qty_roll :			if qty_roll[key] != 0 :				if in_clause == "" :					in_clause = """("{0}" """.format(key[0])				else :					in_clause = """{0}, "{1}" """.format(in_clause,key[0])		if in_clause != "" :			in_clause = in_clause + ')'			result = frappe.db.sql("""				SELECT b.`item_code`,b.`warehouse`,b.`actual_qty`,b.`valuation_rate` FROM `tabBin`b WHERE b.`item_code` IN {0} 				""".format(in_clause))			for res in result :				key = (res[0],res[1])				if key in qty_roll :					actual_qty = qty_roll[key] + res[2]					val_rate = res[3]					pr_doc.append("items", {						"item_code": res[0],						"qty": actual_qty,						"warehouse": res[1],						"valuation_rate": val_rate						})				array_pcs_in = []		pcs_in_qty = {}		array_pcs_out = []		pcs_out_qty = {}		cur_qty = {}		default_warehouse = {}		count = 0		if self.pcs_in:			for item in self.pcs_in:				if item.item_code_pcs not in array_pcs_in:					array_pcs_in.append(item.item_code_pcs)					pcs_in_qty[item.item_code_pcs] = item.total_pcs					default_warehouse[item.item_code_pcs] = item.warehouse					cur_qty[item.item_code_pcs] = item.total_pcs		if self.pcs_out:			for item in self.pcs_out:				if item.item_code_pcs not in array_pcs_out:					array_pcs_out.append(item.item_code_pcs)					pcs_out_qty[item.item_code_pcs] = item.total_pcs					default_warehouse[item.item_code_pcs] = item.warehouse					cur_qty[item.item_code_pcs] = -item.total_pcs		in_clause = ""		for item in array_pcs_in:			if in_clause == "":				in_clause = """("{0}" """.format(item)			else:				in_clause = """{0},"{1}" """.format(in_clause, item)		for item in array_pcs_out:			if in_clause == "":				in_clause = """("{0}" """.format(item)			else:				in_clause = """{0},"{1}" """.format(in_clause, item)		if not in_clause == "":			in_clause = in_clause + ')'			bin = frappe.db.sql("""				SELECT b.`item_code`,b.`warehouse`,b.`actual_qty`,b.`valuation_rate` FROM `tabBin`b WHERE b.`item_code` IN {0} 				""".format(in_clause), as_list=1)			for item in bin:				if item[0] in array_pcs_in and item[1] == default_warehouse[item[0]]:					cur_qty[item[0]] = item[2] + pcs_in_qty[item[0]]				elif item[0] in array_pcs_out and item[1] == default_warehouse[item[0]]:					cur_qty[item[0]] = item[2] - pcs_out_qty[item[0]]				else:					continue				pr_doc.append("items", {					"item_code": item[0],					"qty": cur_qty[item[0]],					"warehouse": default_warehouse[item[0]],					"valuation_rate": item[3]					})		pr_doc.save()		pr_doc.submit()	def cancel_stock_recon_erpnext_on_cancel(self):		result = frappe.db.sql("""SELECT sr.`name` FROM `tabStock Reconciliation`sr WHERE sr.`stock_recon_inventory`="{0}" AND sr.`docstatus`=1 			""".format(self.name), as_list=1)		for res in result:			name = res[0]			sr = frappe.get_doc("Stock Reconciliation", name)			sr.cancel()	def cancel_stock_entry_on_cancel(self):		result = frappe.db.sql("""SELECT i.`name` FROM `tabStock Entry`i WHERE i.`creating_sri`="{0}" AND i.`docstatus`=1 """.format(self.name), as_list=1)		for res in result:			name = res[0]			se = frappe.get_doc("Stock Entry", name)			se.cancel()	def create_stock_entry_on_submit(self):		item_in = {}		item_out = {}		for d in self.get("roll_in"):			if d.item_code_roll in item_in:				item = item_in[d.item_code_roll]				new_qty = d.total_roll * d.yard_atau_meter_per_roll				total_qty = item["qty"] + new_qty				new_rate = (d.rate * new_qty + item["rate"] * item["qty"]) / total_qty				item["qty"] = total_qty				item["rate"] = new_rate				item_in[d.item_code_roll] = item			else:				new_item = {}				new_item["item_code"] = d.item_code_roll				new_item["warehouse"] = d.warehouse				new_item["qty"] = d.total_roll * d.yard_atau_meter_per_roll				new_item["rate"] = d.rate				item_in[d.item_code_roll] = new_item		for d in self.get("pcs_in"):			new_item = {}			new_item["item_code"] = d.item_code			new_item["warehouse"] = d.warehouse			new_item["qty"] = d.total_roll * d.yard_atau_meter_per_roll			new_item["rate"] = d.rate			item_in[d.item_code] = item		for d in self.get("roll_out"):			if d.item_code_roll in item_out:				item = item_out[d.item_code_roll]				new_qty = d.total_roll * d.yard_atau_meter_per_roll				total_qty = item["qty"] + new_qty				new_rate = (d.rate * new_qty + item["rate"] * item["qty"]) / total_qty				item["qty"] = total_qty				item["rate"] = new_rate				item_out[d.item_code_roll] = new_item			else:				new_item = {}				new_item["item_code"] = d.item_code_roll				new_item["warehouse"] = d.warehouse				new_item["qty"] = d.total_roll * d.yard_atau_meter_per_roll				new_item["rate"] = d.rate				item_out[d.item_code_roll] = new_item		for d in self.get("pcs_out"):			new_item = {}			new_item["item_code"] = d.item_code_roll			new_item["warehouse"] = d.warehouse			new_item["qty"] = d.total_roll * d.yard_atau_meter_per_roll			new_item["rate"] = d.rate			item_out[d.item_code] = item		if len(item_in) > 0:			new_doc = frappe.new_doc("Stock Entry")			new_doc.purpose = "Material Receipt"			for key, value in item_in.items():				d = new_doc.append("items")				d.item_code = value["item_code"]				d.t_warehouse = value["warehouse"]				d.qty = value["qty"]				d.basic_rate = value["rate"]			new_doc.save()			new_doc.submit()		if len(item_out) > 0:			new_doc = frappe.new_doc("Stock Entry")			new_doc.purpose = "Material Issue"			for key, value in item_out.items():				d = new_doc.append("items")				d.item_code = value["item_code"]				d.s_warehouse = value["warehouse"]				d.qty = value["qty"]				d.basic_rate = value["rate"]			new_doc.save()			new_doc.submit()	def add_master_inventory_on_submit(self):		for d in self.get("roll_in"):			if d.item_code_roll:				uom = frappe.get_value("Item", d.item_code_roll, "stock_uom")				cek_inventory = frappe.db.sql("""					SELECT					mi.`item_code`					FROM `tabMaster Inventory` mi					WHERE mi.`item_code` = "{}"					""".format(d.item_code_roll))				if cek_inventory:					if d.group:						cek_data = frappe.db.sql("""							SELECT 							di.`item_code_variant`,							di.`total_roll`,							di.`total_yard_atau_meter`							FROM `tabData Inventory` di							WHERE di.`item_code_variant` = "{}"							and di.`yard_atau_meter_per_roll` = "{}"							and di.`warehouse` = "{}"							and di.`colour` = "{}"							and di.`group` = "{}"							and di.`inventory_uom` = "{}"							""".format(d.item_code_roll, d.yard_atau_meter_per_roll, d.warehouse, d.colour, d.group, uom))						if cek_data:							current_total_roll = cek_data[0][1]							current_total_yard = cek_data[0][2]							new_total_roll = current_total_roll + d.total_roll							new_total_yard = current_total_yard + d.total_roll * d.yard_atau_meter_per_roll							frappe.db.sql("""								UPDATE 								`tabData Inventory` di								SET 								di.`total_roll`="{0}",								di.`total_yard_atau_meter`="{1}"								WHERE di.`item_code_variant`="{2}"								AND di.`yard_atau_meter_per_roll`="{3}"								AND di.`warehouse`="{4}"								AND di.`colour` = "{5}"								AND di.`group` = "{6}"								AND di.`inventory_uom` = "{7}"								""".format(new_total_roll, new_total_yard, d.item_code_roll, d.yard_atau_meter_per_roll, d.warehouse, d.colour, d.group, uom))						else:							mi = frappe.get_doc("Master Inventory", d.item_code_roll)							mi.append("data_inventory", {								"doctype": "Data Inventory",								"item_code_variant": d.item_code_roll,								"yard_atau_meter_per_roll": d.yard_atau_meter_per_roll,								"total_roll": d.total_roll,								"total_yard_atau_meter": d.yard_atau_meter_per_roll * d.total_roll,								"warehouse": d.warehouse,								"colour": d.colour,								"group": d.group,								"inventory_uom": uom								})							mi.flags.ignore_permissions = 1							mi.save()					else:						cek_data = frappe.db.sql("""								SELECT								di.`item_code_variant`,								di.`total_roll`,								di.`total_yard_atau_meter`								FROM `tabData Inventory` di								WHERE di.`item_code_variant` = "{}"								and di.`yard_atau_meter_per_roll` = "{}"								and di.`warehouse` = "{}"								and di.`colour` = "{}"								and di.`inventory_uom` = "{}"								and di.`group` is null								""".format(d.item_code_roll, d.yard_atau_meter_per_roll, d.warehouse, d.colour, uom))						if cek_data:							current_total_roll = cek_data[0][1]							current_total_yard = cek_data[0][2]							new_total_roll = current_total_roll + d.total_roll							new_total_yard = current_total_yard + d.yard_atau_meter_per_roll * d.total_roll							frappe.db.sql("""								UPDATE								`tabData Inventory` di								SET 								di.`total_roll`="{0}",								di.`total_yard_atau_meter`="{1}"								WHERE di.`item_code_variant`="{2}"								AND di.`yard_atau_meter_per_roll`="{3}"								AND di.`warehouse`="{4}"								AND di.`colour` = "{5}"								AND di.`inventory_uom` = "{6}"								and di.`group` is null								""".format(new_total_roll, new_total_yard, d.item_code_roll, d.yard_atau_meter_per_roll, d.warehouse, d.colour, uom))													else:							mi = frappe.get_doc("Master Inventory", d.item_code_roll)							mi.append("data_inventory", {								"doctype": "Data Inventory",								"item_code_variant": d.item_code_roll,								"yard_atau_meter_per_roll": d.yard_atau_meter_per_roll,								"total_roll": d.total_roll,								"total_yard_atau_meter": d.yard_atau_meter_per_roll * d.total_roll,								"warehouse": d.warehouse,								"colour": d.colour,								"inventory_uom": uom})							mi.flags.ignore_permissions = 1							mi.save()				else:					item = frappe.get_doc("Item", d.item_code_roll)					mi = frappe.new_doc("Master Inventory")					mi.update({						"item_code": item.item_code,						"item_name": item.item_name						})					if i.group:						mi.append("data_inventory", {							"doctype": "Data Inventory",							"item_code_variant": d.item_code_roll,							"yard_atau_meter_per_roll": d.yard_atau_meter_per_roll,							"total_roll": d.total_roll,							"total_yard_atau_meter": d.yard_atau_meter_per_roll * d.total_roll,							"warehouse": d.warehouse,							"colour": d.colour,							"group": d.group,							"inventory_uom": uom							})					else:						mi.append("data_inventory", {							"doctype" : "Data Inventory",							"item_code_variant" : d.item_code_roll,							"yard_atau_meter_per_roll" : d.yard_atau_meter_per_roll,							"total_roll": d.total_roll,							"total_yard_atau_meter": d.yard_atau_meter_per_roll * d.total_roll,							"warehouse": d.warehouse,							"colour": d.colour,							"inventory_uom": uom							})					mi.flags.ignore_permissions = 1					mi.save()	def remove_master_inventory_on_submit(self):		for d in self.get("roll_out"):			uom = frappe.get_value("Item", d.item_code_roll, "stock_uom")			if d.group:				cek_data = frappe.db.sql("""					SELECT					di.`item_code_variant`,					di.`total_roll`,					di.`total_yard_atau_meter`					FROM `tabData Inventory` di					WHERE di.`item_code_variant` = "{}"					and di.`yard_atau_meter_per_roll` = "{}"					and di.`warehouse` = "{}"					and di.`colour` = "{}"					and di.`group` = "{}"					and di.`inventory_uom` = "{}"					""".format(d.item_code_roll, d.yard_atau_meter_per_roll, d.warehouse, d.colour, d.group, uom))				if cek_data:					current_total_roll = cek_data[0][1]					current_total_yard = cek_data[0][2]					new_total_roll = current_total_roll - d.total_roll					new_total_yard = current_total_yard - d.total_roll * d.yard_atau_meter_per_roll					frappe.db.sql("""						UPDATE 						`tabData Inventory` di						SET						di.`total_roll`="{0}",						di.`total_yard_atau_meter`="{1}"						WHERE di.`item_code_variant`="{2}"						AND di.`yard_atau_meter_per_roll`="{3}"						AND di.`warehouse`="{4}"						AND di.`colour` = "{5}"						AND di.`group` = "{6}"						AND di.`inventory_uom` = "{7}"						""".format(new_total_roll, new_total_yard, d.item_code_roll, d.yard_atau_meter_per_roll, d.warehouse, d.colour, d.group, uom))			else:				cek_data = frappe.db.sql("""					SELECT 					di.`item_code_variant`,					di.`total_roll`,					di.`total_yard_atau_meter`					FROM `tabData Inventory` di					WHERE di.`item_code_variant` = "{}"					and di.`yard_atau_meter_per_roll` = "{}"					and di.`warehouse` = "{}"					and di.`colour` = "{}"					and di.`group` is null					and di.`inventory_uom` = "{}"					""".format(d.item_code_roll, d.yard_atau_meter_per_roll, d.warehouse, d.colour, uom))				if cek_data:					current_total_roll = cek_data[0][1]					current_total_yard = cek_data[0][2]					new_total_roll = current_total_roll - d.total_roll					new_total_yard = current_total_yard - d.total_roll * d.yard_atau_meter_per_roll					frappe.db.sql("""						UPDATE 						`tabData Inventory` di						SET 						di.`total_roll`="{0}",						di.`total_yard_atau_meter`="{1}"						WHERE di.`item_code_variant`="{2}"						AND di.`yard_atau_meter_per_roll`="{3}"						AND di.`warehouse`="{4}"						AND di.`colour` = "{5}"						AND di.`inventory_uom` = "{6}"						and di.`group` is null						""".format(new_total_roll, new_total_yard, d.item_code_roll, d.yard_atau_meter_per_roll, d.warehouse, d.colour, uom))									else :					frappe.throw("ABCDE")					def add_master_inventory_on_cancel(self):		for d in self.get("roll_out"):			if d.item_code_roll:				uom = frappe.get_value("Item", d.item_code_roll, "stock_uom")				cek_inventory = frappe.db.sql("""					SELECT					mi.`item_code`					FROM `tabMaster Inventory` mi					WHERE mi.`item_code` = "{}" 					""".format(d.item_code_roll))				if cek_inventory:					if d.group:						cek_data = frappe.db.sql("""							SELECT 							di.`item_code_variant`,							di.`total_roll`,							di.`total_yard_atau_meter`							FROM `tabData Inventory` di							WHERE di.`item_code_variant` = "{}"							and di.`yard_atau_meter_per_roll` = "{}"							and di.`warehouse` = "{}"							and di.`colour` = "{}"							and di.`group` = "{}"							and di.`inventory_uom` = "{}"							""".format(d.item_code_roll, d.yard_atau_meter_per_roll, d.warehouse, d.colour, d.group, uom))						if cek_data:							current_total_roll = cek_data[0][1]							current_total_yard = cek_data[0][2]							new_total_roll = current_total_roll + d.total_roll							new_total_yard = current_total_yard + d.total_roll * d.yard_atau_meter_per_roll							frappe.db.sql("""								UPDATE 								`tabData Inventory` di								SET 								di.`total_roll`="{0}",								di.`total_yard_atau_meter`="{1}"								WHERE di.`item_code_variant`="{2}"								AND di.`yard_atau_meter_per_roll`="{3}"								AND di.`warehouse`="{4}"								AND di.`colour` = "{5}"								AND di.`group` = "{6}"								AND di.`inventory_uom` = "{7}"								""".format(new_total_roll, new_total_yard, d.item_code_roll, d.yard_atau_meter_per_roll, d.warehouse, d.colour, d.group, uom))						else:							mi = frappe.get_doc("Master Inventory", d.item_code_roll)							mi.append("data_inventory", {								"doctype": "Data Inventory",								"item_code_variant": d.item_code_roll,								"yard_atau_meter_per_roll": d.yard_atau_meter_per_roll,								"total_roll": d.total_roll,								"total_yard_atau_meter": d.yard_atau_meter_per_roll * d.total_roll,								"warehouse": d.warehouse,								"colour": d.colour,								"group": d.group,								"inventory_uom": uom								})							mi.flags.ignore_permissions = 1							mi.save()					else:						cek_data = frappe.db.sql("""							SELECT 							di.`item_code_variant`,							di.`total_roll`,							di.`total_yard_atau_meter`							FROM `tabData Inventory` di							WHERE di.`item_code_variant` = "{}"							and di.`yard_atau_meter_per_roll` = "{}"							and di.`warehouse` = "{}"							and di.`colour` = "{}"							and di.`inventory_uom` = "{}"							and di.`group` is null							""".format(d.item_code_roll, d.yard_atau_meter_per_roll, d.warehouse, d.colour, uom))						if cek_data:							current_total_roll = cek_data[0][1]							current_total_yard = cek_data[0][2]							new_total_roll = current_total_roll + d.total_roll							new_total_yard = current_total_yard + d.yard_atau_meter_per_roll * d.total_roll							frappe.db.sql("""								UPDATE 								`tabData Inventory` di								SET 								di.`total_roll`="{0}",								di.`total_yard_atau_meter`="{1}"								WHERE di.`item_code_variant`="{2}"								AND di.`yard_atau_meter_per_roll`="{3}"								AND di.`warehouse`="{4}"								AND di.`colour` = "{5}"								AND di.`inventory_uom` = "{6}"								and di.`group` is null								""".format(new_total_roll, new_total_yard, d.item_code_roll, d.yard_atau_meter_per_roll, d.warehouse, d.colour, uom))						else:							mi = frappe.get_doc("Master Inventory", d.item_code_roll)							mi.append("data_inventory", {								"doctype": "Data Inventory",								"item_code_variant": d.item_code_roll,								"yard_atau_meter_per_roll": d.yard_atau_meter_per_roll,								"total_roll": d.total_roll,								"total_yard_atau_meter": d.yard_atau_meter_per_roll * d.total_roll,								"warehouse": d.warehouse,								"colour": d.colour,								"inventory_uom": uom								})							mi.flags.ignore_permissions = 1							mi.save()				else:					item = frappe.get_doc("Item", d.item_code_roll)					mi = frappe.new_doc("Master Inventory")					mi.update({						"item_code": item.item_code,						"item_name": item.item_name						})					if i.group:						mi.append("data_inventory", {							"doctype": "Data Inventory",							"item_code_variant": d.item_code_roll,							"yard_atau_meter_per_roll": d.yard_atau_meter_per_roll,							"total_roll": d.total_roll,							"total_yard_atau_meter": d.yard_atau_meter_per_roll * d.total_roll,							"warehouse": d.warehouse,							"colour": d.colour,							"group": d.group,							"inventory_uom": uom})					else:						mi.append("data_inventory", {							"doctype": "Data Inventory",							"item_code_variant": d.item_code_roll,							"yard_atau_meter_per_roll": d.yard_atau_meter_per_roll,							"total_roll": d.total_roll,							"total_yard_atau_meter": d.yard_atau_meter_per_roll * d.total_roll,							"warehouse": d.warehouse,							"colour": d.colour,							"inventory_uom": uom							})					mi.flags.ignore_permissions = 1					mi.save()	def remove_master_inventory_on_cancel(self):		for d in self.get("roll_in"):			uom = frappe.get_value("Item", d.item_code_roll, "stock_uom")			if d.group:				cek_data = frappe.db.sql("""					SELECT 					di.`item_code_variant`,					di.`total_roll`,					di.`total_yard_atau_meter`					FROM `tabData Inventory` di					WHERE di.`item_code_variant` = "{}"					and di.`yard_atau_meter_per_roll` = "{}"					and di.`warehouse` = "{}"					and di.`colour` = "{}"					and di.`group` = "{}"					and di.`inventory_uom` = "{}"					""".format(d.item_code_roll, d.yard_atau_meter_per_roll, d.warehouse, d.colour, d.group, uom))				if cek_data:					current_total_roll = cek_data[0][1]					current_total_yard = cek_data[0][2]					new_total_roll = current_total_roll - d.total_roll					new_total_yard = current_total_yard - d.total_roll * d.yard_atau_meter_per_roll					frappe.db.sql("""						UPDATE 						`tabData Inventory` di						SET 						di.`total_roll`="{0}",						di.`total_yard_atau_meter`="{1}"						WHERE di.`item_code_variant`="{2}"						AND di.`yard_atau_meter_per_roll`="{3}"						AND di.`warehouse`="{4}"						AND di.`colour` = "{5}"						AND di.`group` = "{6}"						AND di.`inventory_uom` = "{7}"						""".format(new_total_roll, new_total_yard, d.item_code_roll, d.yard_atau_meter_per_roll, d.warehouse, d.colour, d.group, uom))			else:				cek_data = frappe.db.sql("""					SELECT 					di.`item_code_variant`,					di.`total_roll`,					di.`total_yard_atau_meter`					FROM `tabData Inventory` di					WHERE di.`item_code_variant` = "{}"					and di.`yard_atau_meter_per_roll` = "{}"					and di.`warehouse` = "{}"					and di.`colour` = "{}"					and di.`group` is null					and di.`inventory_uom` = "{}"					""".format(d.item_code_roll, d.yard_atau_meter_per_roll, d.warehouse, d.colour, uom))				if cek_data:					current_total_roll = cek_data[0][1]					current_total_yard = cek_data[0][2]					new_total_roll = current_total_roll - d.total_roll					new_total_yard = current_total_yard - d.total_roll * d.yard_atau_meter_per_roll					frappe.db.sql("""						UPDATE 						`tabData Inventory`di 						SET 						di.`total_roll`="{0}",						di.`total_yard_atau_meter`="{1}"						WHERE di.`item_code_variant`="{2}"						AND di.`yard_atau_meter_per_roll`="{3}"						AND di.`warehouse`="{4}"						AND di.`colour` = "{5}"						AND di.`inventory_uom` = "{6}"						and di.`group` is null						""".format(new_total_roll, new_total_yard, d.item_code_roll, d.yard_atau_meter_per_roll, d.warehouse, d.colour, uom))@frappe.whitelist()def save_stock_recon_inventory(doc, method):	pass@frappe.whitelist()def submit_stock_recon_inventory(doc, method):	pass@frappe.whitelist()def cancel_stock_recon_inventory(doc, method):	pass 